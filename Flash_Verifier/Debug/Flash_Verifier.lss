
Flash_Verifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e62  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d0  00000000  00000000  00002c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002fd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 34 01 	call	0x268	; 0x268 <main>
  88:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z10FLASH_initv>:
#define DBSY 0x80

//Init function
void FLASH_init()
{
	SPI_Master_init();
  90:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z15SPI_Master_initv>
  94:	08 95       	ret

00000096 <_Z14FLASH_CMD_ADDRhm>:
}

//Internal function to be used for commands which have addresses
//WARNING: Does not select/deselect the device on its own
void FLASH_CMD_ADDR(unsigned char cmd, uint32_t addr)
{
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	14 2f       	mov	r17, r20
  9e:	d5 2f       	mov	r29, r21
  a0:	c6 2f       	mov	r28, r22
	SPI_Master_Tx(cmd);
  a2:	0e 94 45 01 	call	0x28a	; 0x28a <_Z13SPI_Master_Txh>
	SPI_Master_Tx((unsigned char) (addr >>  0));
  a6:	81 2f       	mov	r24, r17
  a8:	0e 94 45 01 	call	0x28a	; 0x28a <_Z13SPI_Master_Txh>
	SPI_Master_Tx((unsigned char) (addr >>  8));
  ac:	8d 2f       	mov	r24, r29
  ae:	0e 94 45 01 	call	0x28a	; 0x28a <_Z13SPI_Master_Txh>
	SPI_Master_Tx((unsigned char) (addr >> 16));
  b2:	8c 2f       	mov	r24, r28
  b4:	0e 94 45 01 	call	0x28a	; 0x28a <_Z13SPI_Master_Txh>
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	08 95       	ret

000000c0 <_Z10FLASH_Readm>:

//Read in 1 byte from the flash memory
unsigned char FLASH_Read(uint32_t addr)
{
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
	unsigned char output;

	//Ensure address is in range
	if(addr > 0x1FFFFF)
  c8:	61 15       	cp	r22, r1
  ca:	71 05       	cpc	r23, r1
  cc:	20 e2       	ldi	r18, 0x20	; 32
  ce:	82 07       	cpc	r24, r18
  d0:	91 05       	cpc	r25, r1
  d2:	80 f4       	brcc	.+32     	; 0xf4 <_Z10FLASH_Readm+0x34>
  d4:	6b 01       	movw	r12, r22
  d6:	7c 01       	movw	r14, r24
		return -1;

	SPI_Select();
  d8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10SPI_Selectv>

	//Interface with the device
	FLASH_CMD_ADDR(READ, addr);
  dc:	b7 01       	movw	r22, r14
  de:	a6 01       	movw	r20, r12
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <_Z14FLASH_CMD_ADDRhm>

	output = SPI_Master_Rx();
  e6:	0e 94 4a 01 	call	0x294	; 0x294 <_Z13SPI_Master_Rxv>
  ea:	f8 2e       	mov	r15, r24

	//Deselecting the device will end the stream of information coming in
	SPI_Deselect();
  ec:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z12SPI_Deselectv>

	return output;
  f0:	8f 2d       	mov	r24, r15
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <_Z10FLASH_Readm+0x36>
{
	unsigned char output;

	//Ensure address is in range
	if(addr > 0x1FFFFF)
		return -1;
  f4:	8f ef       	ldi	r24, 0xFF	; 255

	//Deselecting the device will end the stream of information coming in
	SPI_Deselect();

	return output;
}
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	df 90       	pop	r13
  fc:	cf 90       	pop	r12
  fe:	08 95       	ret

00000100 <_Z11FLASH_Writemh>:

//Write in 1 byte to the flash memory
void FLASH_Write(uint32_t addr, unsigned char data)
{
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	cf 93       	push	r28
	//Ensuring address is compatible
	if(addr > 0x1FFFFF)
 10a:	61 15       	cp	r22, r1
 10c:	71 05       	cpc	r23, r1
 10e:	20 e2       	ldi	r18, 0x20	; 32
 110:	82 07       	cpc	r24, r18
 112:	91 05       	cpc	r25, r1
 114:	e8 f4       	brcc	.+58     	; 0x150 <_Z11FLASH_Writemh+0x50>
 116:	c4 2f       	mov	r28, r20
 118:	6b 01       	movw	r12, r22
 11a:	7c 01       	movw	r14, r24
		return;

	SPI_Select();
 11c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10SPI_Selectv>

	//It's necessary to set write enable before any writing operation
	SPI_Master_Tx(WREN);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	0e 94 45 01 	call	0x28a	; 0x28a <_Z13SPI_Master_Txh>

	//Send over the instruction, the address, then the data
	FLASH_CMD_ADDR(BYTE_PRGM, addr);
 126:	b7 01       	movw	r22, r14
 128:	a6 01       	movw	r20, r12
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z14FLASH_CMD_ADDRhm>
	SPI_Master_Tx(data);
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 45 01 	call	0x28a	; 0x28a <_Z13SPI_Master_Txh>

	//Deselecting will also  end the write
	SPI_Deselect();
 136:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z12SPI_Deselectv>

	//Verify the data sent over is correct
	if(FLASH_Read(addr) != data)
 13a:	c7 01       	movw	r24, r14
 13c:	b6 01       	movw	r22, r12
 13e:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z10FLASH_Readm>
 142:	c8 17       	cp	r28, r24
 144:	29 f0       	breq	.+10     	; 0x150 <_Z11FLASH_Writemh+0x50>
	{//The data didn't write properly
		//Disable the timer, shutdown all interrupts, and display that the program has ended
		TIM0_Disable();
 146:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z12TIM0_Disablev>
		cli();
 14a:	f8 94       	cli
		terminal_blink();
 14c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z14terminal_blinkv>
	}
}
 150:	cf 91       	pop	r28
 152:	ff 90       	pop	r15
 154:	ef 90       	pop	r14
 156:	df 90       	pop	r13
 158:	cf 90       	pop	r12
 15a:	08 95       	ret

0000015c <_Z9GPIO_initv>:

//Init function
void GPIO_init()
{
	//Initialize the port for blinking as output
	DDRB |= _BV(ASSERT_LED);
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	84 b9       	out	0x04, r24	; 4
	DDRB |= _BV(ERROR_LED);
 162:	84 b1       	in	r24, 0x04	; 4
 164:	82 60       	ori	r24, 0x02	; 2
 166:	84 b9       	out	0x04, r24	; 4

	//Enable the GPIO pin-change interrupt on pin 28
	PCMSK1 |= _BV(PCINT13);
 168:	ec e6       	ldi	r30, 0x6C	; 108
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	80 83       	st	Z, r24
	PCICR |= _BV(PCIE1);
 172:	e8 e6       	ldi	r30, 0x68	; 104
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
	DDRC &= ~_BV(PORTC5);
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	87 b9       	out	0x07, r24	; 7
 182:	08 95       	ret

00000184 <_Z12activate_LEDc>:
}

//Assert the signal LED
void activate_LED(char pin)
{
	PORTB |= _BV(pin);
 184:	95 b1       	in	r25, 0x05	; 5
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_Z12activate_LEDc+0xc>
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <_Z12activate_LEDc+0x8>
 194:	29 2b       	or	r18, r25
 196:	25 b9       	out	0x05, r18	; 5
 198:	08 95       	ret

0000019a <_Z14deactivate_LEDc>:
}

//Deassert the signal LED
void deactivate_LED(char pin)
{
	PORTB &= ~_BV(pin);
 19a:	95 b1       	in	r25, 0x05	; 5
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_Z14deactivate_LEDc+0xc>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_Z14deactivate_LEDc+0x8>
 1aa:	20 95       	com	r18
 1ac:	29 23       	and	r18, r25
 1ae:	25 b9       	out	0x05, r18	; 5
 1b0:	08 95       	ret

000001b2 <_Z14terminal_blinkv>:
//Display to the user that a terminal error has occured 
void terminal_blink()
{
	while(1)
	{
		activate_LED(ERROR_LED);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 c2 00 	call	0x184	; 0x184 <_Z12activate_LEDc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	81 ee       	ldi	r24, 0xE1	; 225
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <_Z14terminal_blinkv+0xc>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <_Z14terminal_blinkv+0x16>
 1c8:	00 00       	nop
		_delay_ms(100);
		deactivate_LED(ERROR_LED);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z14deactivate_LEDc>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	81 ee       	ldi	r24, 0xE1	; 225
 1d4:	94 e0       	ldi	r25, 0x04	; 4
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_Z14terminal_blinkv+0x24>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z14terminal_blinkv+0x2e>
 1e0:	00 00       	nop
 1e2:	e7 cf       	rjmp	.-50     	; 0x1b2 <_Z14terminal_blinkv>

000001e4 <__vector_4>:
	}
}

//GPIO interrupt which sends over the global count to the flash device
ISR(PCINT1_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	unsigned char old_val = 0;
	unsigned char new_val = 0;
	unsigned char sum = 0;

	//Run only when the signal changes to high
	if(PORTC & _BV(PORTC5))
 208:	45 9b       	sbis	0x08, 5	; 8
 20a:	1c c0       	rjmp	.+56     	; 0x244 <__vector_4+0x60>
	{
		old_val = FLASH_Read(0xBEEF);	
 20c:	6f ee       	ldi	r22, 0xEF	; 239
 20e:	7e eb       	ldi	r23, 0xBE	; 190
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z10FLASH_Readm>
		new_val = count;
 218:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		sum = old_val + new_val;
 21c:	98 2f       	mov	r25, r24
 21e:	9c 0f       	add	r25, r28

		if(sum < old_val || sum < new_val)
 220:	98 17       	cp	r25, r24
 222:	10 f0       	brcs	.+4      	; 0x228 <__vector_4+0x44>
 224:	9c 17       	cp	r25, r28
 226:	20 f4       	brcc	.+8      	; 0x230 <__vector_4+0x4c>
		{//If the new value rolls over the value in flash
			//Signal a roll-over
			activate_LED(ASSERT_LED);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 c2 00 	call	0x184	; 0x184 <_Z12activate_LEDc>
 22e:	03 c0       	rjmp	.+6      	; 0x236 <__vector_4+0x52>
		}
		else
		{//If the new value doesn't roll over the value in flash
			//Signal a lack of a roll-over
			deactivate_LED(ASSERT_LED);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z14deactivate_LEDc>
		}

		FLASH_Write(0xBEEF, new_val);
 236:	4c 2f       	mov	r20, r28
 238:	6f ee       	ldi	r22, 0xEF	; 239
 23a:	7e eb       	ldi	r23, 0xBE	; 190
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 80 00 	call	0x100	; 0x100 <_Z11FLASH_Writemh>
	}
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	cf 91       	pop	r28
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <main>:
#include "SPI.h"
#include "FLASH_drv.h"

int main(void)
{
	GPIO_init();
 268:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z9GPIO_initv>
	TIM0_init();
 26c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z9TIM0_initv>
	SPI_Master_init();
 270:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z15SPI_Master_initv>
	FLASH_init();
 274:	0e 94 48 00 	call	0x90	; 0x90 <_Z10FLASH_initv>

	//Enable the interrupts
	sei();
 278:	78 94       	sei
 27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0x12>

0000027c <_Z15SPI_Master_initv>:

//Init function
void SPI_Master_init()
{
	//Initialize the MOSI & SCK pins on PORT C
	DDR_SPI |= _BV(DD_MOSI) | _BV(DD_SCK) ;
 27c:	84 b1       	in	r24, 0x04	; 4
 27e:	88 62       	ori	r24, 0x28	; 40
 280:	84 b9       	out	0x04, r24	; 4

	//Enable SPI in master mode & set clock rate to f_clk/16
	//Both this device & the flash memory will operate in SPI mode 0
	SPCR |= _BV(SPE) | _BV(MSTR) | _BV(SPR0);
 282:	8c b5       	in	r24, 0x2c	; 44
 284:	81 65       	ori	r24, 0x51	; 81
 286:	8c bd       	out	0x2c, r24	; 44
 288:	08 95       	ret

0000028a <_Z13SPI_Master_Txh>:

//Send over a byte of data 
void SPI_Master_Tx(unsigned char data)
{
	//Start the transmission
	SPDR = data;
 28a:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until the transmission is over
	while(!(SPSR & _BV(SPIF))) {}
 28c:	0d b4       	in	r0, 0x2d	; 45
 28e:	07 fe       	sbrs	r0, 7
 290:	fd cf       	rjmp	.-6      	; 0x28c <_Z13SPI_Master_Txh+0x2>
}
 292:	08 95       	ret

00000294 <_Z13SPI_Master_Rxv>:

//Receive a byte of data
unsigned char SPI_Master_Rx()
{
	//Send a dummy byte
	SPDR = 0xFF;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	8e bd       	out	0x2e, r24	; 46

	//Wait until data is received
	while(!(SPSR & _BV(SPIF))) {}
 298:	0d b4       	in	r0, 0x2d	; 45
 29a:	07 fe       	sbrs	r0, 7
 29c:	fd cf       	rjmp	.-6      	; 0x298 <_Z13SPI_Master_Rxv+0x4>

	return (unsigned char) SPDR;
 29e:	8e b5       	in	r24, 0x2e	; 46
}
 2a0:	08 95       	ret

000002a2 <_Z10SPI_Selectv>:

//Pull the 1 CS line low & select a device & begin communication
void SPI_Select()
{
	DDR_SPI &= ~_BV(CS_FLASH);
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	8b 7f       	andi	r24, 0xFB	; 251
 2a6:	84 b9       	out	0x04, r24	; 4
 2a8:	08 95       	ret

000002aa <_Z12SPI_Deselectv>:
}

//Pull the 1 CS line high to deselect a device & end communication
void SPI_Deselect()
{
	DDR_SPI |= _BV(CS_FLASH);
 2aa:	84 b1       	in	r24, 0x04	; 4
 2ac:	84 60       	ori	r24, 0x04	; 4
 2ae:	84 b9       	out	0x04, r24	; 4
 2b0:	08 95       	ret

000002b2 <_Z9TIM0_initv>:
}

//Enable the timer
void TIM0_Enable()
{
	TCCR0B |= _BV(CS01);
 2b2:	84 b5       	in	r24, 0x24	; 36
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	84 bd       	out	0x24, r24	; 36
 2b8:	89 ef       	ldi	r24, 0xF9	; 249
 2ba:	87 bd       	out	0x27, r24	; 39
 2bc:	ee e6       	ldi	r30, 0x6E	; 110
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	80 83       	st	Z, r24
 2c6:	85 b5       	in	r24, 0x25	; 37
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	85 bd       	out	0x25, r24	; 37
 2cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d0:	08 95       	ret

000002d2 <_Z12TIM0_Disablev>:
 2d2:	85 b5       	in	r24, 0x25	; 37
 2d4:	8d 7f       	andi	r24, 0xFD	; 253
 2d6:	85 bd       	out	0x25, r24	; 37
 2d8:	08 95       	ret

000002da <__vector_14>:
}

//Interrupt which activates on the hardware timer ticks
ISR(TIMER0_COMPA_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	8f 93       	push	r24
	//Increment the time if it's not max value yet. Else, roll over
	count = (count != 255) ? (count + 1) : 0;
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ea:	8f 3f       	cpi	r24, 0xFF	; 255
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <__vector_14+0x18>
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <__vector_14+0x1a>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2f8:	8f 91       	pop	r24
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
