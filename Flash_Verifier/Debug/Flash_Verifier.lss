
Flash_Verifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156f  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da2  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  0000293d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083e  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061f  00000000  00000000  00003c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000042a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_4>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_11>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_14>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	f5 01       	movw	r30, r10

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 30       	cpi	r26, 0x02	; 2
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 48 01 	call	0x290	; 0x290 <main>
  a0:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN14Flash_Verifier5FLASH4initEv>:
	#define DBSY 0x80
	
	//Init function
	void FLASH::init()
	{
		SPI::master_init();
  a8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN14Flash_Verifier3SPI11master_initEv>
  ac:	08 95       	ret

000000ae <_ZN14Flash_Verifier5FLASH8CMD_ADDREhm>:
	}
	
	//Internal function to be used for commands which have addresses
	//WARNING: Does not select/deselect the device on its own
	void FLASH::CMD_ADDR(unsigned char cmd, uint32_t addr)
	{
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	14 2f       	mov	r17, r20
  b6:	d5 2f       	mov	r29, r21
  b8:	c6 2f       	mov	r28, r22
		SPI::master_Tx(cmd);
  ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14Flash_Verifier3SPI9master_TxEh>
		SPI::master_Tx((unsigned char) (addr >>  0));
  be:	81 2f       	mov	r24, r17
  c0:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14Flash_Verifier3SPI9master_TxEh>
		SPI::master_Tx((unsigned char) (addr >>  8));
  c4:	8d 2f       	mov	r24, r29
  c6:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14Flash_Verifier3SPI9master_TxEh>
		SPI::master_Tx((unsigned char) (addr >> 16));
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14Flash_Verifier3SPI9master_TxEh>
	}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	08 95       	ret

000000d8 <_ZN14Flash_Verifier5FLASH4readEm>:
	
	//Read in 1 byte from the flash memory
	unsigned char FLASH::read(uint32_t addr)
	{
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
		unsigned char output;
	
		//Ensure address is in range
		if(addr > 0x1FFFFF)
  e0:	61 15       	cp	r22, r1
  e2:	71 05       	cpc	r23, r1
  e4:	20 e2       	ldi	r18, 0x20	; 32
  e6:	82 07       	cpc	r24, r18
  e8:	91 05       	cpc	r25, r1
  ea:	80 f4       	brcc	.+32     	; 0x10c <_ZN14Flash_Verifier5FLASH4readEm+0x34>
  ec:	6b 01       	movw	r12, r22
  ee:	7c 01       	movw	r14, r24
			return -1;
	
		SPI::select();
  f0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN14Flash_Verifier3SPI6selectEv>
	
		//Interface with the device
		FLASH::CMD_ADDR(READ, addr);
  f4:	b7 01       	movw	r22, r14
  f6:	a6 01       	movw	r20, r12
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 57 00 	call	0xae	; 0xae <_ZN14Flash_Verifier5FLASH8CMD_ADDREhm>
	
		output = SPI::master_Rx();
  fe:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN14Flash_Verifier3SPI9master_RxEv>
 102:	f8 2e       	mov	r15, r24
	
		//Deselecting the device will end the stream of information coming in
		SPI::deselect();
 104:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN14Flash_Verifier3SPI8deselectEv>
	
		return output;
 108:	8f 2d       	mov	r24, r15
 10a:	01 c0       	rjmp	.+2      	; 0x10e <_ZN14Flash_Verifier5FLASH4readEm+0x36>
	{
		unsigned char output;
	
		//Ensure address is in range
		if(addr > 0x1FFFFF)
			return -1;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
	
		//Deselecting the device will end the stream of information coming in
		SPI::deselect();
	
		return output;
	}
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

00000118 <_ZN14Flash_Verifier5FLASH5writeEmh>:
	
	//Write in 1 byte to the flash memory
	void FLASH::write(uint32_t addr, unsigned char data)
	{
 118:	cf 92       	push	r12
 11a:	df 92       	push	r13
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	cf 93       	push	r28
		//Ensuring address is compatible
		if(addr > 0x1FFFFF)
 122:	61 15       	cp	r22, r1
 124:	71 05       	cpc	r23, r1
 126:	20 e2       	ldi	r18, 0x20	; 32
 128:	82 07       	cpc	r24, r18
 12a:	91 05       	cpc	r25, r1
 12c:	f8 f4       	brcc	.+62     	; 0x16c <_ZN14Flash_Verifier5FLASH5writeEmh+0x54>
 12e:	c4 2f       	mov	r28, r20
 130:	6b 01       	movw	r12, r22
 132:	7c 01       	movw	r14, r24
			return;
	
		SPI::select();
 134:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN14Flash_Verifier3SPI6selectEv>
	
		//It's necessary to set write enable before any writing operation
		SPI::master_Tx(WREN);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14Flash_Verifier3SPI9master_TxEh>
	
		//Send over the instruction, the address, then the data
		CMD_ADDR(BYTE_PRGM, addr);
 13e:	b7 01       	movw	r22, r14
 140:	a6 01       	movw	r20, r12
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 57 00 	call	0xae	; 0xae <_ZN14Flash_Verifier5FLASH8CMD_ADDREhm>
		SPI::master_Tx(data);
 148:	8c 2f       	mov	r24, r28
 14a:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14Flash_Verifier3SPI9master_TxEh>
	
		//Deselecting will also  end the write
		SPI::deselect();
 14e:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN14Flash_Verifier3SPI8deselectEv>
	
		//Verify the data sent over is correct
		if(FLASH::read(addr) != data)
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN14Flash_Verifier5FLASH4readEm>
 15a:	c8 17       	cp	r28, r24
 15c:	39 f0       	breq	.+14     	; 0x16c <_ZN14Flash_Verifier5FLASH5writeEmh+0x54>
		{//The data didn't write properly
			//Disable the timer, shutdown all interrupts, and display that the program has ended
			TIM0.disable();
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN14Flash_Verifier5Timer7disableEv>
			cli();
 166:	f8 94       	cli
			GPIO::terminal_blink();
 168:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14Flash_Verifier4GPIO14terminal_blinkEv>
		}
	}
 16c:	cf 91       	pop	r28
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <_ZN14Flash_Verifier4GPIO4initEv>:
	
	//Init function
	void GPIO::init()
	{
		//Initialize the port for blinking as output
		DDRB |= _BV(ASSERT_LED);
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	84 b9       	out	0x04, r24	; 4
		DDRB |= _BV(ERROR_LED);
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	82 60       	ori	r24, 0x02	; 2
 182:	84 b9       	out	0x04, r24	; 4
	
		//Enable the GPIO pin-change interrupt on pin 28
		PCMSK1 |= _BV(PCINT13);
 184:	ec e6       	ldi	r30, 0x6C	; 108
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	80 83       	st	Z, r24
		PCICR |= _BV(PCIE1);
 18e:	e8 e6       	ldi	r30, 0x68	; 104
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 60       	ori	r24, 0x02	; 2
 196:	80 83       	st	Z, r24
		DDRC &= ~_BV(PORTC5);
 198:	87 b1       	in	r24, 0x07	; 7
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	87 b9       	out	0x07, r24	; 7
 19e:	08 95       	ret

000001a0 <_ZN14Flash_Verifier4GPIO12activate_LEDEc>:
	}
	
	//Assert the signal LED
	void GPIO::activate_LED(char pin)
	{
		PORTB |= _BV(pin);
 1a0:	95 b1       	in	r25, 0x05	; 5
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <_ZN14Flash_Verifier4GPIO12activate_LEDEc+0xc>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <_ZN14Flash_Verifier4GPIO12activate_LEDEc+0x8>
 1b0:	29 2b       	or	r18, r25
 1b2:	25 b9       	out	0x05, r18	; 5
 1b4:	08 95       	ret

000001b6 <_ZN14Flash_Verifier4GPIO14deactivate_LEDEc>:
	}
	
	//Deassert the signal LED
	void GPIO::deactivate_LED(char pin)
	{
		PORTB &= ~_BV(pin);
 1b6:	95 b1       	in	r25, 0x05	; 5
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <_ZN14Flash_Verifier4GPIO14deactivate_LEDEc+0xc>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <_ZN14Flash_Verifier4GPIO14deactivate_LEDEc+0x8>
 1c6:	20 95       	com	r18
 1c8:	29 23       	and	r18, r25
 1ca:	25 b9       	out	0x05, r18	; 5
 1cc:	08 95       	ret

000001ce <_ZN14Flash_Verifier4GPIO14terminal_blinkEv>:
	//Display to the user that a terminal error has occurred 
	void GPIO::terminal_blink()
	{
		while(1)
		{
			activate_LED(ERROR_LED);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN14Flash_Verifier4GPIO12activate_LEDEc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	81 ee       	ldi	r24, 0xE1	; 225
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <_ZN14Flash_Verifier4GPIO14terminal_blinkEv+0xc>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN14Flash_Verifier4GPIO14terminal_blinkEv+0x16>
 1e4:	00 00       	nop
			_delay_ms(100);
			deactivate_LED(ERROR_LED);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN14Flash_Verifier4GPIO14deactivate_LEDEc>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	81 ee       	ldi	r24, 0xE1	; 225
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <_ZN14Flash_Verifier4GPIO14terminal_blinkEv+0x24>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_ZN14Flash_Verifier4GPIO14terminal_blinkEv+0x2e>
 1fc:	00 00       	nop
 1fe:	e7 cf       	rjmp	.-50     	; 0x1ce <_ZN14Flash_Verifier4GPIO14terminal_blinkEv>

00000200 <__vector_4>:
		}
	}
	
	//GPIO interrupt which sends over the global count to the flash device
	ISR(PCINT1_vect)
	{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
		unsigned char old_val = 0;
		unsigned char new_val = 0;
		unsigned char sum = 0;
	
		//Run only when the signal changes to high
		if(PORTC & _BV(PORTC5))
 226:	45 9b       	sbis	0x08, 5	; 8
 228:	20 c0       	rjmp	.+64     	; 0x26a <__vector_4+0x6a>
		{
			old_val = FLASH::read(0xBEEF);	
 22a:	6f ee       	ldi	r22, 0xEF	; 239
 22c:	7e eb       	ldi	r23, 0xBE	; 190
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 6c 00 	call	0xd8	; 0xd8 <_ZN14Flash_Verifier5FLASH4readEm>
 236:	d8 2f       	mov	r29, r24
			new_val = TIM0.get_count();
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 ca 01 	call	0x394	; 0x394 <_ZN14Flash_Verifier5Timer9get_countEv>
 240:	c8 2f       	mov	r28, r24
			sum = old_val + new_val;
 242:	8d 2f       	mov	r24, r29
 244:	8c 0f       	add	r24, r28
	
			if(sum < old_val || sum < new_val)
 246:	8d 17       	cp	r24, r29
 248:	10 f0       	brcs	.+4      	; 0x24e <__vector_4+0x4e>
 24a:	8c 17       	cp	r24, r28
 24c:	20 f4       	brcc	.+8      	; 0x256 <__vector_4+0x56>
			{//If the new value rolls over the value in flash
				//Signal a roll-over
				GPIO::activate_LED(ASSERT_LED);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN14Flash_Verifier4GPIO12activate_LEDEc>
 254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_4+0x5c>
			}
			else
			{//If the new value doesn't roll over the value in flash
				//Signal a lack of a roll-over
				GPIO::deactivate_LED(ASSERT_LED);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN14Flash_Verifier4GPIO14deactivate_LEDEc>
			}
	
			FLASH::write(0xBEEF, new_val);
 25c:	4c 2f       	mov	r20, r28
 25e:	6f ee       	ldi	r22, 0xEF	; 239
 260:	7e eb       	ldi	r23, 0xBE	; 190
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN14Flash_Verifier5FLASH5writeEmh>
		}
	}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	7f 91       	pop	r23
 27c:	6f 91       	pop	r22
 27e:	5f 91       	pop	r21
 280:	4f 91       	pop	r20
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:

using namespace std;

int main(void)
{
	Flash_Verifier::GPIO::init();
 290:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN14Flash_Verifier4GPIO4initEv>
	Flash_Verifier::SPI::master_init();
 294:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN14Flash_Verifier3SPI11master_initEv>
	Flash_Verifier::FLASH::init();
 298:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN14Flash_Verifier5FLASH4initEv>

	//Enable the interrupts
	sei();
 29c:	78 94       	sei
 29e:	ff cf       	rjmp	.-2      	; 0x29e <main+0xe>

000002a0 <_ZN14Flash_Verifier3SPI11master_initEv>:
	
	//Init function
	void SPI::master_init()
	{
		//Initialize the MOSI & SCK pins on PORT C
		DDR_SPI |= _BV(DD_MOSI) | _BV(DD_SCK) ;
 2a0:	84 b1       	in	r24, 0x04	; 4
 2a2:	88 62       	ori	r24, 0x28	; 40
 2a4:	84 b9       	out	0x04, r24	; 4
	
		//Enable SPI in master mode & set clock rate to f_clk/16
		//Both this device & the flash memory will operate in SPI mode 0
		SPCR |= _BV(SPE) | _BV(MSTR) | _BV(SPR0);
 2a6:	8c b5       	in	r24, 0x2c	; 44
 2a8:	81 65       	ori	r24, 0x51	; 81
 2aa:	8c bd       	out	0x2c, r24	; 44
 2ac:	08 95       	ret

000002ae <_ZN14Flash_Verifier3SPI9master_TxEh>:
	
	//Send over a byte of data 
	void SPI::master_Tx(unsigned char data)
	{
		//Start the transmission
		SPDR = data;
 2ae:	8e bd       	out	0x2e, r24	; 46
		
		//Wait until the transmission is over
		while(!(SPSR & _BV(SPIF))) {}
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <_ZN14Flash_Verifier3SPI9master_TxEh+0x2>
	}
 2b6:	08 95       	ret

000002b8 <_ZN14Flash_Verifier3SPI9master_RxEv>:
	
	//Receive a byte of data
	unsigned char SPI::master_Rx()
	{
		//Send a dummy byte
		SPDR = 0xFF;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8e bd       	out	0x2e, r24	; 46
	
		//Wait until data is received
		while(!(SPSR & _BV(SPIF))) {}
 2bc:	0d b4       	in	r0, 0x2d	; 45
 2be:	07 fe       	sbrs	r0, 7
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <_ZN14Flash_Verifier3SPI9master_RxEv+0x4>
	
		return (unsigned char) SPDR;
 2c2:	8e b5       	in	r24, 0x2e	; 46
	}
 2c4:	08 95       	ret

000002c6 <_ZN14Flash_Verifier3SPI6selectEv>:
	
	//Pull the 1 CS line low & select a device & begin communication
	void SPI::select()
	{
		DDR_SPI &= ~_BV(CS_FLASH);
 2c6:	84 b1       	in	r24, 0x04	; 4
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	84 b9       	out	0x04, r24	; 4
 2cc:	08 95       	ret

000002ce <_ZN14Flash_Verifier3SPI8deselectEv>:
	}
	
	//Pull the 1 CS line high to deselect a device & end communication
	void SPI::deselect()
	{
		DDR_SPI |= _BV(CS_FLASH);
 2ce:	84 b1       	in	r24, 0x04	; 4
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	84 b9       	out	0x04, r24	; 4
 2d4:	08 95       	ret

000002d6 <_ZN14Flash_Verifier5TimerC1Ec>:
		{
			TCCR0B |= _BV(CS01);
		}
		else
		{
			TCCR0B |= _BV(CS11);
 2d6:	dc 01       	movw	r26, r24
 2d8:	6c 93       	st	X, r22
 2da:	61 11       	cpse	r22, r1
 2dc:	10 c0       	rjmp	.+32     	; 0x2fe <_ZN14Flash_Verifier5TimerC1Ec+0x28>
 2de:	24 b5       	in	r18, 0x24	; 36
 2e0:	22 60       	ori	r18, 0x02	; 2
 2e2:	24 bd       	out	0x24, r18	; 36
 2e4:	2a ef       	ldi	r18, 0xFA	; 250
 2e6:	27 bd       	out	0x27, r18	; 39
 2e8:	ee e6       	ldi	r30, 0x6E	; 110
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	20 81       	ld	r18, Z
 2ee:	22 60       	ori	r18, 0x02	; 2
 2f0:	20 83       	st	Z, r18
 2f2:	11 96       	adiw	r26, 0x01	; 1
 2f4:	1c 92       	st	X, r1
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	85 bd       	out	0x25, r24	; 37
 2fc:	08 95       	ret
 2fe:	e0 e8       	ldi	r30, 0x80	; 128
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	20 81       	ld	r18, Z
 304:	20 83       	st	Z, r18
 306:	e1 e8       	ldi	r30, 0x81	; 129
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	20 81       	ld	r18, Z
 30c:	28 60       	ori	r18, 0x08	; 8
 30e:	20 83       	st	Z, r18
 310:	24 ef       	ldi	r18, 0xF4	; 244
 312:	31 e0       	ldi	r19, 0x01	; 1
 314:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 318:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 31c:	af e6       	ldi	r26, 0x6F	; 111
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	2c 91       	ld	r18, X
 322:	22 60       	ori	r18, 0x02	; 2
 324:	2c 93       	st	X, r18
 326:	dc 01       	movw	r26, r24
 328:	11 96       	adiw	r26, 0x01	; 1
 32a:	1c 92       	st	X, r1
 32c:	80 81       	ld	r24, Z
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <_ZN14Flash_Verifier5TimerC1Ev>:
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <_ZN14Flash_Verifier5TimerC1Ev+0x6>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN14Flash_Verifier5TimerC1Ec>
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <_Z41__static_initialization_and_destruction_0ii>:
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	39 f4       	brne	.+14     	; 0x364 <_Z41__static_initialization_and_destruction_0ii+0x12>
 356:	6f 3f       	cpi	r22, 0xFF	; 255
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	21 f4       	brne	.+8      	; 0x364 <_Z41__static_initialization_and_destruction_0ii+0x12>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 9a 01 	call	0x334	; 0x334 <_ZN14Flash_Verifier5TimerC1Ev>
 364:	08 95       	ret

00000366 <_ZN14Flash_Verifier5Timer7disableEv>:
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	81 11       	cpse	r24, r1
 36c:	04 c0       	rjmp	.+8      	; 0x376 <_ZN14Flash_Verifier5Timer7disableEv+0x10>
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	8d 7f       	andi	r24, 0xFD	; 253
 372:	85 bd       	out	0x25, r24	; 37
 374:	08 95       	ret
 376:	e1 e8       	ldi	r30, 0x81	; 129
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	80 83       	st	Z, r24
 380:	08 95       	ret

00000382 <_ZN14Flash_Verifier5Timer9inc_countEv>:
		}
	}
	
	//Increment the time if it's not max value yet. Else, roll over
	void Timer::inc_count()
	{
 382:	fc 01       	movw	r30, r24
		count = (count != 255) ? (count + 1) : 0;
 384:	91 81       	ldd	r25, Z+1	; 0x01
 386:	9f 3f       	cpi	r25, 0xFF	; 255
 388:	11 f0       	breq	.+4      	; 0x38e <_ZN14Flash_Verifier5Timer9inc_countEv+0xc>
 38a:	9f 5f       	subi	r25, 0xFF	; 255
 38c:	01 c0       	rjmp	.+2      	; 0x390 <_ZN14Flash_Verifier5Timer9inc_countEv+0xe>
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	91 83       	std	Z+1, r25	; 0x01
 392:	08 95       	ret

00000394 <_ZN14Flash_Verifier5Timer9get_countEv>:
	
	//Get method
	unsigned char Timer::get_count()
	{
		return count;
	}
 394:	fc 01       	movw	r30, r24
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	08 95       	ret

0000039a <__vector_14>:
	
	//Interrupt which activates on the hardware timer ticks
	ISR(TIMER0_COMPA_vect)
	{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
		TIM0.inc_count();
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN14Flash_Verifier5Timer9inc_countEv>
	}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_11>:

	/*
	 * Alias the TIM1 interrupt to the TIM0 interrupt,
	 * so both of the interrupts are the same
	 */
	ISR_ALIAS(TIMER1_COMPA_vect, TIMER0_COMPA_vect);
 3e6:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_14>

000003ea <_GLOBAL__sub_I__ZN14Flash_Verifier4TIM0E>:
}
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	7f ef       	ldi	r23, 0xFF	; 255
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 a9 01 	call	0x352	; 0x352 <_Z41__static_initialization_and_destruction_0ii>
 3f6:	08 95       	ret

000003f8 <__tablejump2__>:
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	05 90       	lpm	r0, Z+
 3fe:	f4 91       	lpm	r31, Z
 400:	e0 2d       	mov	r30, r0
 402:	09 94       	ijmp

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
